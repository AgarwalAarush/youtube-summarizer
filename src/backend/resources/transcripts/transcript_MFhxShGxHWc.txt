binary search an algorithm for finding an element in a sorted array by continuously chopping the search area in half the first known implementation took place around 200 bc and ancient babylon on clay tablets used for record keeping but your brain has likely implemented binary search in everyday life without you even knowing it imagine looking for a word like magic in the dictionary you wouldn't flip every page until you get to m instead you open it in the middle if you overshoot to the cues then you go to the middle of that chunk this time you undershoot to the js so you do the same thing again but in the other direction until finally you find the page you're looking for easy enough now it's time for your technical interview you might be given a question like given a sorted array write a function that returns the index for the given element the easy way to solve that problem is with a simple for loop just loop over every element in the array until you find the one you're looking for that works but you failed the interview because you need to go faster a regular loop results in linear time complexity but you can do better than that here's how we might map out a binary search on a whiteboard first we need to figure out the middle index instead of starting at index 0 we start in the middle if it's equal to the target then we return that index but if that element is greater than the target we know the target must be somewhere on the left so we find the middle of that slice of the array but if it's less than the target then we know the target is somewhere on the right so we repeat the process for that slice of the array the result is a much faster algorithm with logarithmic time complexity because it's able to divide and conquer now to implement the code we could use an iterative approach with a while loop or a recursive function either way is acceptable but let's define a recursive function in javascript the function takes the target value as an argument as well as a starting and ending index first we have a base condition to stop looping when it reaches the end of the array at which point we know the target is not in the array from there we compute the middle index then we check to see if that middle index is equal to the target at which point we can return because we found the element we're looking for otherwise we need to continue searching and that's where recursion comes into play if the middle value is greater than the target then we'll call the same function but this time we'll put the ending index at the middle the other possibility is that the middle value is less than the target in which case we can also recurse but this time we'll put the starting index in the middle and now we have an algorithm that can find an element in a sorted array much faster than a regular loop if you want to see more videos about algorithms on this channel hit the like button and let me know in the comments thanks for watching and i will see you in the next one 